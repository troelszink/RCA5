#File: LocalObstacleAvoidance_V3.fll
Engine: LocalObstacleAvoidance

InputVariable: DirectionToObstacle
  enabled: true
  range: -1.000 1.000
  lock-range: false
  term: Left Ramp -0.500 -1.000
  term: DiagonalLeft Triangle -0.600 -0.350 -0.100
  term: Forward Triangle -0.200 0.000 0.200
  term: DiagonalRight Triangle 0.100 0.350 0.600
  term: Right Ramp 0.500 1.000

InputVariable: DistanceToObstacle
    enabled: true
    range: -1.000 1.000
    lock-range: false
    term: Small Ramp -0.800 -1.000
    term: Medium Triangle -0.900 -0.800 -0.700
    term: Large Ramp -0.800 1.0000

InputVariable: CornerType
    enabled: true
    range: -1.000 1.000
    lock-range: false
    term: Left Ramp 0.250 -1.000
    term: Right Ramp -0.250 1.000

InputVariable: DirectionToGoal
  enabled: true
  range: -1.000 1.000
  lock-range: false
  term: Left Ramp -0.500 -1.000
  term: DiagonalLeft Triangle -0.600 -0.350 -0.100
  term: Forward Triangle -0.200 0.000 0.200
  term: DiagonalRight Triangle 0.100 0.350 0.600
  term: Right Ramp 0.500 1.000

InputVariable: FreeLeftPassage
    enabled: true
    range: 0.000 1.000
    lock-range: false
    term: False Ramp 0.250 -1.000
    term: True Ramp -0.250 1.000

InputVariable: FreeRightPassage
    enabled: true
    range: 0.000 1.000
    lock-range: false
    term: False Ramp 0.250 -1.000
    term: True Ramp -0.250 1.000

OutputVariable: Steer
    enabled: true
    range: -1.000 1.000
    lock-range: false
    aggregation: Maximum								# t-norm
    defuzzifier: Centroid 100
    default: nan
    lock-previous: false
    term: Left Triangle -1.000 -0.667 -0.333				# Has to be triangles in output, because the output has to be finite in both directions
    term: DiagonalLeft Triangle -0.667 -0.333 0.000
    term: Forward Triangle -0.333 0.000 0.333
    term: DiagonalRight Triangle 0.000 0.333 0.667
    term: Right Triangle 0.333 0.667 1.000

OutputVariable: Speed
    enabled: true
    range: 0.000 1.000
    lock-range: false
    aggregation: Maximum
    defuzzifier: Centroid 100
    default: nan
    lock-previous: false
    #term: None Triangle 0.000 0.250
    term: Slow Triangle 0.050 0.000 0.100
    term: Medium Triangle 0.000 0.400 0.800
    term: Fast Triangle 0.600 0.800 1.000

    # ADD RULES

RuleBlock: mamdani
    enabled: true
    conjunction: Minimum
    disjunction: none
    implication: AlgebraicProduct
    activation: General

    rule: if DistanceToObstacle is Medium and DirectionToGoal is Left then Steer is Left and Speed is Medium
    rule: if DistanceToObstacle is Medium and DirectionToGoal is DiagonalLeft then Steer is DiagonalLeft and Speed is Medium
    rule: if DistanceToObstacle is Medium and DirectionToGoal is Forward then Steer is Forward and Speed is Medium
    rule: if DistanceToObstacle is Medium and DirectionToGoal is DiagonalRight then Steer is DiagonalRight and Speed is Medium
    rule: if DistanceToObstacle is Medium and DirectionToGoal is Right then Steer is Right and Speed is Medium

    # RULES FOR DIRECTION TO GOAL
    rule: if DistanceToObstacle is Small and DirectionToObstacle is Left and DirectionToGoal is Left then Steer is Forward and Speed is Fast
    rule: if DistanceToObstacle is Small and DirectionToObstacle is Left and DirectionToGoal is DiagonalLeft then Steer is Forward and Speed is Fast
    rule: if DistanceToObstacle is Small and DirectionToObstacle is Left and DirectionToGoal is Forward then Steer is Forward and Speed is Fast
    rule: if DistanceToObstacle is Small and DirectionToObstacle is Left and DirectionToGoal is DiagonalRight then Steer is Forward and Speed is Fast
    rule: if DistanceToObstacle is Small and DirectionToObstacle is Left and DirectionToGoal is Right then Steer is Right and Speed is Fast

    rule: if DistanceToObstacle is Small and DirectionToObstacle is Right and DirectionToGoal is Left then Steer is Left and Speed is Fast
    rule: if DistanceToObstacle is Small and DirectionToObstacle is Right and DirectionToGoal is DiagonalLeft then Steer is Forward and Speed is Fast
    rule: if DistanceToObstacle is Small and DirectionToObstacle is Right and DirectionToGoal is Forward then Steer is Forward and Speed is Fast
    rule: if DistanceToObstacle is Small and DirectionToObstacle is Right and DirectionToGoal is DiagonalRight then Steer is Forward and Speed is Fast
    rule: if DistanceToObstacle is Small and DirectionToObstacle is Right and DirectionToGoal is Right then Steer is Forward and Speed is Fast

    # RULES FOR CORNER_TYPE
    rule: if DistanceToObstacle is Small and DirectionToObstacle is Forward and CornerType is Left then Steer is Right and Speed is Slow
    rule: if DistanceToObstacle is Small and DirectionToObstacle is Forward and CornerType is Right then Steer is Left and Speed is Slow
    #rule: if DistanceToObstacle is Medium and DirectionToObstacle is Forward and CornerType is Left then Steer is DiagonalRight and Speed is Medium
    #rule: if DistanceToObstacle is Medium and DirectionToObstacle is Forward and CornerType is Right then Steer is DiagonalLeft and Speed is Medium
    rule: if DistanceToObstacle is Small and DirectionToObstacle is DiagonalLeft and CornerType is Left then Steer is DiagonalRight and Speed is Slow
    rule: if DistanceToObstacle is Small and DirectionToObstacle is DiagonalLeft and CornerType is Right then Steer is DiagonalLeft and Speed is Slow
    rule: if DistanceToObstacle is Small and DirectionToObstacle is DiagonalRight and CornerType is Left then Steer is DiagonalRight and Speed is Slow
    rule: if DistanceToObstacle is Small and DirectionToObstacle is DiagonalRight and CornerType is Right then Steer is DiagonalLeft and Speed is Slow

    rule: if DistanceToObstacle is Large and DirectionToGoal is Left then Steer is Left and Speed is Fast
    rule: if DistanceToObstacle is Large and DirectionToGoal is DiagonalLeft then Steer is DiagonalLeft and Speed is Fast
    rule: if DistanceToObstacle is Large and DirectionToGoal is Forward then Steer is Forward and Speed is Fast
    rule: if DistanceToObstacle is Large and DirectionToGoal is DiagonalRight then Steer is DiagonalRight and Speed is Fast
    rule: if DistanceToObstacle is Large and DirectionToGoal is Right then Steer is Right and Speed is Fast