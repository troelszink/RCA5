#File: LocalObstacleAvoidance_V1.fll
Engine: LocalObstacleAvoidance

InputVariable: DirectionToObstacle
  enabled: true
  range: -1.000 1.000
  lock-range: false
  term: Left Ramp -0.500 -1.000
  term: DiagonalLeft Triangle -1.000 -0.500 0.000
  term: Forward Triangle -0.100 0.000 0.100
  term: DiagonalRight Triangle 0.000 0.500 1.000
  term: Right Ramp 0.500 1.000

InputVariable: DistanceToObstacle
    enabled: true
    range: -1.000 1.000
    lock-range: false
    term: Small Ramp -0.500 -1.000
    term: Medium Triangle -0.750 0.000 0.750
    term: Large Ramp 0.500 1.0000

OutputVariable: Steer
    enabled: true
    range: -1.000 1.000
    lock-range: false
    aggregation: Maximum								# t-norm
    defuzzifier: Centroid 100
    default: nan
    lock-previous: false
    term: Left Triangle -1.000 -0.667 -0.333				# Has to be triangles in output, because the output has to be finite in both directions
    term: DiagonalLeft Triangle -0.667 -0.333 0.000
    term: Forward Triangle -0.333 0.000 0.333
    term: DiagonalRight Triangle 0.000 0.333 0.667
    term: Right Triangle 0.333 0.667 1.000

    # ADD RULES

    RuleBlock: mamdani
      enabled: true
      conjunction: Minimum
      disjunction: none
      implication: AlgebraicProduct
      activation: General

    rule: if DistanceToObstacle is Medium and DirectionToObstacle is Left then Steer is Forward
    rule: if DistanceToObstacle is Medium and DirectionToObstacle is DiagonalLeft then Steer is Forward
    rule: if DistanceToObstacle is Medium and DirectionToObstacle is Forward then Steer is DiagonalRight
    rule: if DistanceToObstacle is Medium and DirectionToObstacle is DiagonalRight then Steer is Forward
    rule: if DistanceToObstacle is Medium and DirectionToObstacle is Right then Steer is Forward

    rule: if DistanceToObstacle is Small and DirectionToObstacle is Left then Steer is  DiagonalRight
    rule: if DistanceToObstacle is Small and DirectionToObstacle is DiagonalLeft then Steer is Forward
    rule: if DistanceToObstacle is Small and DirectionToObstacle is Forward then Steer is Right
    rule: if DistanceToObstacle is Small and DirectionToObstacle is DiagonalRight then Steer is Forward
    rule: if DistanceToObstacle is Small and DirectionToObstacle is Right then Steer is DiagonalLeft

    rule: if DistanceToObstacle is Large and DirectionToObstacle is Left then Steer is Forward
    rule: if DistanceToObstacle is Large and DirectionToObstacle is DiagonalLeft then Steer is Forward
    rule: if DistanceToObstacle is Large and DirectionToObstacle is Forward then Steer is Forward
    rule: if DistanceToObstacle is Large and DirectionToObstacle is DiagonalRight then Steer is Forward
    rule: if DistanceToObstacle is Large and DirectionToObstacle is Right then Steer is Forward